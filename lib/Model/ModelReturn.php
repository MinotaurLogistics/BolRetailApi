<?php
/**
 * ModelReturn
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\BolClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v4
 *
 * The bol.com API for Retailers.
 *
 * OpenAPI spec version: 4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\BolClient\Model;

use \ArrayAccess;
use \Swagger\BolClient\ObjectSerializer;

/**
 * ModelReturn Class Doc Comment
 *
 * @category Class
 * @package  Swagger\BolClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelReturn implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Return';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'return_id' => 'int',
        'registration_date_time' => '\DateTime',
        'fulfilment_method' => 'string',
        'return_items' => '\Swagger\BolClient\Model\ReturnItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'return_id' => 'int64',
        'registration_date_time' => 'date-time',
        'fulfilment_method' => null,
        'return_items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'return_id' => 'returnId',
        'registration_date_time' => 'registrationDateTime',
        'fulfilment_method' => 'fulfilmentMethod',
        'return_items' => 'returnItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'return_id' => 'setReturnId',
        'registration_date_time' => 'setRegistrationDateTime',
        'fulfilment_method' => 'setFulfilmentMethod',
        'return_items' => 'setReturnItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'return_id' => 'getReturnId',
        'registration_date_time' => 'getRegistrationDateTime',
        'fulfilment_method' => 'getFulfilmentMethod',
        'return_items' => 'getReturnItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['return_id'] = isset($data['return_id']) ? $data['return_id'] : null;
        $this->container['registration_date_time'] = isset($data['registration_date_time']) ? $data['registration_date_time'] : null;
        $this->container['fulfilment_method'] = isset($data['fulfilment_method']) ? $data['fulfilment_method'] : null;
        $this->container['return_items'] = isset($data['return_items']) ? $data['return_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['return_items'] === null) {
            $invalidProperties[] = "'return_items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets return_id
     *
     * @return int
     */
    public function getReturnId()
    {
        return $this->container['return_id'];
    }

    /**
     * Sets return_id
     *
     * @param int $return_id Unique identifier for a return.
     *
     * @return $this
     */
    public function setReturnId($return_id)
    {
        $this->container['return_id'] = $return_id;

        return $this;
    }

    /**
     * Gets registration_date_time
     *
     * @return \DateTime
     */
    public function getRegistrationDateTime()
    {
        return $this->container['registration_date_time'];
    }

    /**
     * Sets registration_date_time
     *
     * @param \DateTime $registration_date_time The date and time in ISO 8601 format when this return was registered.
     *
     * @return $this
     */
    public function setRegistrationDateTime($registration_date_time)
    {
        $this->container['registration_date_time'] = $registration_date_time;

        return $this;
    }

    /**
     * Gets fulfilment_method
     *
     * @return string
     */
    public function getFulfilmentMethod()
    {
        return $this->container['fulfilment_method'];
    }

    /**
     * Sets fulfilment_method
     *
     * @param string $fulfilment_method Specifies whether this shipment has been fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB). Defaults to FBR.
     *
     * @return $this
     */
    public function setFulfilmentMethod($fulfilment_method)
    {
        $this->container['fulfilment_method'] = $fulfilment_method;

        return $this;
    }

    /**
     * Gets return_items
     *
     * @return \Swagger\BolClient\Model\ReturnItem[]
     */
    public function getReturnItems()
    {
        return $this->container['return_items'];
    }

    /**
     * Sets return_items
     *
     * @param \Swagger\BolClient\Model\ReturnItem[] $return_items return_items
     *
     * @return $this
     */
    public function setReturnItems($return_items)
    {
        $this->container['return_items'] = $return_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


