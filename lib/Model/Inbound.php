<?php
/**
 * Inbound
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\BolClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v4
 *
 * The bol.com API for Retailers.
 *
 * OpenAPI spec version: 4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\BolClient\Model;

use \ArrayAccess;
use \Swagger\BolClient\ObjectSerializer;

/**
 * Inbound Class Doc Comment
 *
 * @category Class
 * @package  Swagger\BolClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Inbound implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Inbound';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inbound_id' => 'int',
        'reference' => 'string',
        'creation_date_time' => '\DateTime',
        'state' => 'string',
        'labelling_service' => 'bool',
        'announced_bsk_us' => 'int',
        'announced_quantity' => 'int',
        'received_bsk_us' => 'int',
        'received_quantity' => 'int',
        'time_slot' => '\Swagger\BolClient\Model\TimeSlot',
        'products' => '\Swagger\BolClient\Model\Product[]',
        'state_transitions' => '\Swagger\BolClient\Model\StateTransition[]',
        'inbound_transporter' => '\Swagger\BolClient\Model\Transporter'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inbound_id' => 'int64',
        'reference' => null,
        'creation_date_time' => 'date-time',
        'state' => null,
        'labelling_service' => null,
        'announced_bsk_us' => 'int64',
        'announced_quantity' => 'int64',
        'received_bsk_us' => 'int64',
        'received_quantity' => 'int64',
        'time_slot' => null,
        'products' => null,
        'state_transitions' => null,
        'inbound_transporter' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inbound_id' => 'inboundId',
        'reference' => 'reference',
        'creation_date_time' => 'creationDateTime',
        'state' => 'state',
        'labelling_service' => 'labellingService',
        'announced_bsk_us' => 'announcedBSKUs',
        'announced_quantity' => 'announcedQuantity',
        'received_bsk_us' => 'receivedBSKUs',
        'received_quantity' => 'receivedQuantity',
        'time_slot' => 'timeSlot',
        'products' => 'products',
        'state_transitions' => 'stateTransitions',
        'inbound_transporter' => 'inboundTransporter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inbound_id' => 'setInboundId',
        'reference' => 'setReference',
        'creation_date_time' => 'setCreationDateTime',
        'state' => 'setState',
        'labelling_service' => 'setLabellingService',
        'announced_bsk_us' => 'setAnnouncedBskUs',
        'announced_quantity' => 'setAnnouncedQuantity',
        'received_bsk_us' => 'setReceivedBskUs',
        'received_quantity' => 'setReceivedQuantity',
        'time_slot' => 'setTimeSlot',
        'products' => 'setProducts',
        'state_transitions' => 'setStateTransitions',
        'inbound_transporter' => 'setInboundTransporter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inbound_id' => 'getInboundId',
        'reference' => 'getReference',
        'creation_date_time' => 'getCreationDateTime',
        'state' => 'getState',
        'labelling_service' => 'getLabellingService',
        'announced_bsk_us' => 'getAnnouncedBskUs',
        'announced_quantity' => 'getAnnouncedQuantity',
        'received_bsk_us' => 'getReceivedBskUs',
        'received_quantity' => 'getReceivedQuantity',
        'time_slot' => 'getTimeSlot',
        'products' => 'getProducts',
        'state_transitions' => 'getStateTransitions',
        'inbound_transporter' => 'getInboundTransporter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_DRAFT = 'DRAFT';
    const STATE_PREANNOUNCED = 'PREANNOUNCED';
    const STATE_ARRIVEDATWH = 'ARRIVEDATWH';
    const STATE_CANCELLED = 'CANCELLED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_DRAFT,
            self::STATE_PREANNOUNCED,
            self::STATE_ARRIVEDATWH,
            self::STATE_CANCELLED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inbound_id'] = isset($data['inbound_id']) ? $data['inbound_id'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['creation_date_time'] = isset($data['creation_date_time']) ? $data['creation_date_time'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['labelling_service'] = isset($data['labelling_service']) ? $data['labelling_service'] : null;
        $this->container['announced_bsk_us'] = isset($data['announced_bsk_us']) ? $data['announced_bsk_us'] : null;
        $this->container['announced_quantity'] = isset($data['announced_quantity']) ? $data['announced_quantity'] : null;
        $this->container['received_bsk_us'] = isset($data['received_bsk_us']) ? $data['received_bsk_us'] : null;
        $this->container['received_quantity'] = isset($data['received_quantity']) ? $data['received_quantity'] : null;
        $this->container['time_slot'] = isset($data['time_slot']) ? $data['time_slot'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['state_transitions'] = isset($data['state_transitions']) ? $data['state_transitions'] : null;
        $this->container['inbound_transporter'] = isset($data['inbound_transporter']) ? $data['inbound_transporter'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['inbound_id'] === null) {
            $invalidProperties[] = "'inbound_id' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['labelling_service'] === null) {
            $invalidProperties[] = "'labelling_service' can't be null";
        }
        if ($this->container['announced_bsk_us'] === null) {
            $invalidProperties[] = "'announced_bsk_us' can't be null";
        }
        if ($this->container['announced_quantity'] === null) {
            $invalidProperties[] = "'announced_quantity' can't be null";
        }
        if ($this->container['received_bsk_us'] === null) {
            $invalidProperties[] = "'received_bsk_us' can't be null";
        }
        if ($this->container['received_quantity'] === null) {
            $invalidProperties[] = "'received_quantity' can't be null";
        }
        if ($this->container['products'] === null) {
            $invalidProperties[] = "'products' can't be null";
        }
        if ($this->container['state_transitions'] === null) {
            $invalidProperties[] = "'state_transitions' can't be null";
        }
        if ($this->container['inbound_transporter'] === null) {
            $invalidProperties[] = "'inbound_transporter' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inbound_id
     *
     * @return int
     */
    public function getInboundId()
    {
        return $this->container['inbound_id'];
    }

    /**
     * Sets inbound_id
     *
     * @param int $inbound_id A unique identifier for an inbound shipment.
     *
     * @return $this
     */
    public function setInboundId($inbound_id)
    {
        $this->container['inbound_id'] = $inbound_id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference A user defined reference to identify the inbound shipment.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets creation_date_time
     *
     * @return \DateTime
     */
    public function getCreationDateTime()
    {
        return $this->container['creation_date_time'];
    }

    /**
     * Sets creation_date_time
     *
     * @param \DateTime $creation_date_time The date and time the inbound shipment was created, in ISO 8601 format.
     *
     * @return $this
     */
    public function setCreationDateTime($creation_date_time)
    {
        $this->container['creation_date_time'] = $creation_date_time;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The current state of the inbound shipment.
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets labelling_service
     *
     * @return bool
     */
    public function getLabellingService()
    {
        return $this->container['labelling_service'];
    }

    /**
     * Sets labelling_service
     *
     * @param bool $labelling_service Indicates whether the inbound will be labeled by bol.com or not.
     *
     * @return $this
     */
    public function setLabellingService($labelling_service)
    {
        $this->container['labelling_service'] = $labelling_service;

        return $this;
    }

    /**
     * Gets announced_bsk_us
     *
     * @return int
     */
    public function getAnnouncedBskUs()
    {
        return $this->container['announced_bsk_us'];
    }

    /**
     * Sets announced_bsk_us
     *
     * @param int $announced_bsk_us The number of announced BSKU‘s.
     *
     * @return $this
     */
    public function setAnnouncedBskUs($announced_bsk_us)
    {
        $this->container['announced_bsk_us'] = $announced_bsk_us;

        return $this;
    }

    /**
     * Gets announced_quantity
     *
     * @return int
     */
    public function getAnnouncedQuantity()
    {
        return $this->container['announced_quantity'];
    }

    /**
     * Sets announced_quantity
     *
     * @param int $announced_quantity The number of announced items.
     *
     * @return $this
     */
    public function setAnnouncedQuantity($announced_quantity)
    {
        $this->container['announced_quantity'] = $announced_quantity;

        return $this;
    }

    /**
     * Gets received_bsk_us
     *
     * @return int
     */
    public function getReceivedBskUs()
    {
        return $this->container['received_bsk_us'];
    }

    /**
     * Sets received_bsk_us
     *
     * @param int $received_bsk_us Number of lines that were scanned in our warehouse. This value does not provide the unique number of received bsku's.
     *
     * @return $this
     */
    public function setReceivedBskUs($received_bsk_us)
    {
        $this->container['received_bsk_us'] = $received_bsk_us;

        return $this;
    }

    /**
     * Gets received_quantity
     *
     * @return int
     */
    public function getReceivedQuantity()
    {
        return $this->container['received_quantity'];
    }

    /**
     * Sets received_quantity
     *
     * @param int $received_quantity The number of received items.
     *
     * @return $this
     */
    public function setReceivedQuantity($received_quantity)
    {
        $this->container['received_quantity'] = $received_quantity;

        return $this;
    }

    /**
     * Gets time_slot
     *
     * @return \Swagger\BolClient\Model\TimeSlot
     */
    public function getTimeSlot()
    {
        return $this->container['time_slot'];
    }

    /**
     * Sets time_slot
     *
     * @param \Swagger\BolClient\Model\TimeSlot $time_slot The timeslot within which your shipment is expected to arrive at the warehouse.
     *
     * @return $this
     */
    public function setTimeSlot($time_slot)
    {
        $this->container['time_slot'] = $time_slot;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Swagger\BolClient\Model\Product[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Swagger\BolClient\Model\Product[] $products List of products.
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets state_transitions
     *
     * @return \Swagger\BolClient\Model\StateTransition[]
     */
    public function getStateTransitions()
    {
        return $this->container['state_transitions'];
    }

    /**
     * Sets state_transitions
     *
     * @param \Swagger\BolClient\Model\StateTransition[] $state_transitions List of state transitions.
     *
     * @return $this
     */
    public function setStateTransitions($state_transitions)
    {
        $this->container['state_transitions'] = $state_transitions;

        return $this;
    }

    /**
     * Gets inbound_transporter
     *
     * @return \Swagger\BolClient\Model\Transporter
     */
    public function getInboundTransporter()
    {
        return $this->container['inbound_transporter'];
    }

    /**
     * Sets inbound_transporter
     *
     * @param \Swagger\BolClient\Model\Transporter $inbound_transporter Transporter for the inbound shipment.
     *
     * @return $this
     */
    public function setInboundTransporter($inbound_transporter)
    {
        $this->container['inbound_transporter'] = $inbound_transporter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


