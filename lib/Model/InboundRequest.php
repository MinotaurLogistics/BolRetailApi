<?php
/**
 * InboundRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\BolClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v4
 *
 * The bol.com API for Retailers.
 *
 * OpenAPI spec version: 4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\BolClient\Model;

use \ArrayAccess;
use \Swagger\BolClient\ObjectSerializer;

/**
 * InboundRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\BolClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InboundRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InboundRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reference' => 'string',
        'time_slot' => '\Swagger\BolClient\Model\TimeSlot',
        'inbound_transporter' => '\Swagger\BolClient\Model\Transporter',
        'labelling_service' => 'bool',
        'products' => '\Swagger\BolClient\Model\InboundProductRequest[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reference' => null,
        'time_slot' => null,
        'inbound_transporter' => null,
        'labelling_service' => null,
        'products' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reference' => 'reference',
        'time_slot' => 'timeSlot',
        'inbound_transporter' => 'inboundTransporter',
        'labelling_service' => 'labellingService',
        'products' => 'products'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reference' => 'setReference',
        'time_slot' => 'setTimeSlot',
        'inbound_transporter' => 'setInboundTransporter',
        'labelling_service' => 'setLabellingService',
        'products' => 'setProducts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reference' => 'getReference',
        'time_slot' => 'getTimeSlot',
        'inbound_transporter' => 'getInboundTransporter',
        'labelling_service' => 'getLabellingService',
        'products' => 'getProducts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['time_slot'] = isset($data['time_slot']) ? $data['time_slot'] : null;
        $this->container['inbound_transporter'] = isset($data['inbound_transporter']) ? $data['inbound_transporter'] : null;
        $this->container['labelling_service'] = isset($data['labelling_service']) ? $data['labelling_service'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['time_slot'] === null) {
            $invalidProperties[] = "'time_slot' can't be null";
        }
        if ($this->container['inbound_transporter'] === null) {
            $invalidProperties[] = "'inbound_transporter' can't be null";
        }
        if ($this->container['labelling_service'] === null) {
            $invalidProperties[] = "'labelling_service' can't be null";
        }
        if ($this->container['products'] === null) {
            $invalidProperties[] = "'products' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference A user defined reference to identify the inbound shipment.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets time_slot
     *
     * @return \Swagger\BolClient\Model\TimeSlot
     */
    public function getTimeSlot()
    {
        return $this->container['time_slot'];
    }

    /**
     * Sets time_slot
     *
     * @param \Swagger\BolClient\Model\TimeSlot $time_slot The timeslot within which your shipment is expected to arrive at the warehouse.
     *
     * @return $this
     */
    public function setTimeSlot($time_slot)
    {
        $this->container['time_slot'] = $time_slot;

        return $this;
    }

    /**
     * Gets inbound_transporter
     *
     * @return \Swagger\BolClient\Model\Transporter
     */
    public function getInboundTransporter()
    {
        return $this->container['inbound_transporter'];
    }

    /**
     * Sets inbound_transporter
     *
     * @param \Swagger\BolClient\Model\Transporter $inbound_transporter Transporter for the inbound shipment.
     *
     * @return $this
     */
    public function setInboundTransporter($inbound_transporter)
    {
        $this->container['inbound_transporter'] = $inbound_transporter;

        return $this;
    }

    /**
     * Gets labelling_service
     *
     * @return bool
     */
    public function getLabellingService()
    {
        return $this->container['labelling_service'];
    }

    /**
     * Sets labelling_service
     *
     * @param bool $labelling_service Indicates whether the inbound will be labeled by bol.com or not.
     *
     * @return $this
     */
    public function setLabellingService($labelling_service)
    {
        $this->container['labelling_service'] = $labelling_service;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Swagger\BolClient\Model\InboundProductRequest[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Swagger\BolClient\Model\InboundProductRequest[] $products List of products.
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


