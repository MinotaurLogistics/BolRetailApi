<?php
/**
 * ReturnItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\BolClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v4
 *
 * The bol.com API for Retailers.
 *
 * OpenAPI spec version: 4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\BolClient\Model;

use \ArrayAccess;
use \Swagger\BolClient\ObjectSerializer;

/**
 * ReturnItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\BolClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReturnItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReturnItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rma_id' => 'int',
        'order_id' => 'string',
        'ean' => 'string',
        'title' => 'string',
        'expected_quantity' => 'int',
        'return_reason' => 'string',
        'return_reason_comments' => 'string',
        'track_and_trace' => 'string',
        'transporter_name' => 'string',
        'handled' => 'bool',
        'processing_results' => '\Swagger\BolClient\Model\ReturnProcessingResult[]',
        'customer_details' => '\Swagger\BolClient\Model\CustomerDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rma_id' => 'int64',
        'order_id' => null,
        'ean' => null,
        'title' => null,
        'expected_quantity' => 'int32',
        'return_reason' => null,
        'return_reason_comments' => null,
        'track_and_trace' => null,
        'transporter_name' => null,
        'handled' => null,
        'processing_results' => null,
        'customer_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rma_id' => 'rmaId',
        'order_id' => 'orderId',
        'ean' => 'ean',
        'title' => 'title',
        'expected_quantity' => 'expectedQuantity',
        'return_reason' => 'returnReason',
        'return_reason_comments' => 'returnReasonComments',
        'track_and_trace' => 'trackAndTrace',
        'transporter_name' => 'transporterName',
        'handled' => 'handled',
        'processing_results' => 'processingResults',
        'customer_details' => 'customerDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rma_id' => 'setRmaId',
        'order_id' => 'setOrderId',
        'ean' => 'setEan',
        'title' => 'setTitle',
        'expected_quantity' => 'setExpectedQuantity',
        'return_reason' => 'setReturnReason',
        'return_reason_comments' => 'setReturnReasonComments',
        'track_and_trace' => 'setTrackAndTrace',
        'transporter_name' => 'setTransporterName',
        'handled' => 'setHandled',
        'processing_results' => 'setProcessingResults',
        'customer_details' => 'setCustomerDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rma_id' => 'getRmaId',
        'order_id' => 'getOrderId',
        'ean' => 'getEan',
        'title' => 'getTitle',
        'expected_quantity' => 'getExpectedQuantity',
        'return_reason' => 'getReturnReason',
        'return_reason_comments' => 'getReturnReasonComments',
        'track_and_trace' => 'getTrackAndTrace',
        'transporter_name' => 'getTransporterName',
        'handled' => 'getHandled',
        'processing_results' => 'getProcessingResults',
        'customer_details' => 'getCustomerDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rma_id'] = isset($data['rma_id']) ? $data['rma_id'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['expected_quantity'] = isset($data['expected_quantity']) ? $data['expected_quantity'] : null;
        $this->container['return_reason'] = isset($data['return_reason']) ? $data['return_reason'] : null;
        $this->container['return_reason_comments'] = isset($data['return_reason_comments']) ? $data['return_reason_comments'] : null;
        $this->container['track_and_trace'] = isset($data['track_and_trace']) ? $data['track_and_trace'] : null;
        $this->container['transporter_name'] = isset($data['transporter_name']) ? $data['transporter_name'] : null;
        $this->container['handled'] = isset($data['handled']) ? $data['handled'] : null;
        $this->container['processing_results'] = isset($data['processing_results']) ? $data['processing_results'] : null;
        $this->container['customer_details'] = isset($data['customer_details']) ? $data['customer_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['processing_results'] === null) {
            $invalidProperties[] = "'processing_results' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rma_id
     *
     * @return int
     */
    public function getRmaId()
    {
        return $this->container['rma_id'];
    }

    /**
     * Sets rma_id
     *
     * @param int $rma_id The RMA (Return Merchandise Authorization) id that identifies this particular return.
     *
     * @return $this
     */
    public function setRmaId($rma_id)
    {
        $this->container['rma_id'] = $rma_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id The id of the customer order this return item is in.
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean The EAN number associated with this product.
     *
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The product title.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets expected_quantity
     *
     * @return int
     */
    public function getExpectedQuantity()
    {
        return $this->container['expected_quantity'];
    }

    /**
     * Sets expected_quantity
     *
     * @param int $expected_quantity The quantity that is expected to be returned by the customer. Note: this can be greater than 1 in case the customer ordered a quantity greater than 1 of the same product in the same customer order.
     *
     * @return $this
     */
    public function setExpectedQuantity($expected_quantity)
    {
        $this->container['expected_quantity'] = $expected_quantity;

        return $this;
    }

    /**
     * Gets return_reason
     *
     * @return string
     */
    public function getReturnReason()
    {
        return $this->container['return_reason'];
    }

    /**
     * Sets return_reason
     *
     * @param string $return_reason The reason why the customer returned this product.
     *
     * @return $this
     */
    public function setReturnReason($return_reason)
    {
        $this->container['return_reason'] = $return_reason;

        return $this;
    }

    /**
     * Gets return_reason_comments
     *
     * @return string
     */
    public function getReturnReasonComments()
    {
        return $this->container['return_reason_comments'];
    }

    /**
     * Sets return_reason_comments
     *
     * @param string $return_reason_comments Additional details from the customer as to why this item was returned.
     *
     * @return $this
     */
    public function setReturnReasonComments($return_reason_comments)
    {
        $this->container['return_reason_comments'] = $return_reason_comments;

        return $this;
    }

    /**
     * Gets track_and_trace
     *
     * @return string
     */
    public function getTrackAndTrace()
    {
        return $this->container['track_and_trace'];
    }

    /**
     * Sets track_and_trace
     *
     * @param string $track_and_trace The track and trace code that is associated with this transport.
     *
     * @return $this
     */
    public function setTrackAndTrace($track_and_trace)
    {
        $this->container['track_and_trace'] = $track_and_trace;

        return $this;
    }

    /**
     * Gets transporter_name
     *
     * @return string
     */
    public function getTransporterName()
    {
        return $this->container['transporter_name'];
    }

    /**
     * Sets transporter_name
     *
     * @param string $transporter_name The name of the transporter.
     *
     * @return $this
     */
    public function setTransporterName($transporter_name)
    {
        $this->container['transporter_name'] = $transporter_name;

        return $this;
    }

    /**
     * Gets handled
     *
     * @return bool
     */
    public function getHandled()
    {
        return $this->container['handled'];
    }

    /**
     * Sets handled
     *
     * @param bool $handled Indicates if this return item has been handled (by the retailer).
     *
     * @return $this
     */
    public function setHandled($handled)
    {
        $this->container['handled'] = $handled;

        return $this;
    }

    /**
     * Gets processing_results
     *
     * @return \Swagger\BolClient\Model\ReturnProcessingResult[]
     */
    public function getProcessingResults()
    {
        return $this->container['processing_results'];
    }

    /**
     * Sets processing_results
     *
     * @param \Swagger\BolClient\Model\ReturnProcessingResult[] $processing_results processing_results
     *
     * @return $this
     */
    public function setProcessingResults($processing_results)
    {
        $this->container['processing_results'] = $processing_results;

        return $this;
    }

    /**
     * Gets customer_details
     *
     * @return \Swagger\BolClient\Model\CustomerDetails
     */
    public function getCustomerDetails()
    {
        return $this->container['customer_details'];
    }

    /**
     * Sets customer_details
     *
     * @param \Swagger\BolClient\Model\CustomerDetails $customer_details customer_details
     *
     * @return $this
     */
    public function setCustomerDetails($customer_details)
    {
        $this->container['customer_details'] = $customer_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


