<?php
/**
 * Fulfilment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\BolClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v4
 *
 * The bol.com API for Retailers.
 *
 * OpenAPI spec version: 4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\BolClient\Model;

use \ArrayAccess;
use \Swagger\BolClient\ObjectSerializer;

/**
 * Fulfilment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\BolClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Fulfilment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Fulfilment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'method' => 'string',
        'delivery_code' => 'string',
        'pick_up_points' => '\Swagger\BolClient\Model\PickUpPoint[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'method' => null,
        'delivery_code' => null,
        'pick_up_points' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'method' => 'method',
        'delivery_code' => 'deliveryCode',
        'pick_up_points' => 'pickUpPoints'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'method' => 'setMethod',
        'delivery_code' => 'setDeliveryCode',
        'pick_up_points' => 'setPickUpPoints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'method' => 'getMethod',
        'delivery_code' => 'getDeliveryCode',
        'pick_up_points' => 'getPickUpPoints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const METHOD_FBR = 'FBR';
    const METHOD_FBB = 'FBB';
    const DELIVERY_CODE__24UURS_23 = '24uurs-23';
    const DELIVERY_CODE__24UURS_22 = '24uurs-22';
    const DELIVERY_CODE__24UURS_21 = '24uurs-21';
    const DELIVERY_CODE__24UURS_20 = '24uurs-20';
    const DELIVERY_CODE__24UURS_19 = '24uurs-19';
    const DELIVERY_CODE__24UURS_18 = '24uurs-18';
    const DELIVERY_CODE__24UURS_17 = '24uurs-17';
    const DELIVERY_CODE__24UURS_16 = '24uurs-16';
    const DELIVERY_CODE__24UURS_15 = '24uurs-15';
    const DELIVERY_CODE__24UURS_14 = '24uurs-14';
    const DELIVERY_CODE__24UURS_13 = '24uurs-13';
    const DELIVERY_CODE__24UURS_12 = '24uurs-12';
    const DELIVERY_CODE__1_2D = '1-2d';
    const DELIVERY_CODE__2_3D = '2-3d';
    const DELIVERY_CODE__3_5D = '3-5d';
    const DELIVERY_CODE__4_8D = '4-8d';
    const DELIVERY_CODE__1_8D = '1-8d';
    const DELIVERY_CODE_MIJN_LEVERBELOFTE = 'MijnLeverbelofte';
    const DELIVERY_CODE_VVB = 'VVB';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_FBR,
            self::METHOD_FBB,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryCodeAllowableValues()
    {
        return [
            self::DELIVERY_CODE__24UURS_23,
            self::DELIVERY_CODE__24UURS_22,
            self::DELIVERY_CODE__24UURS_21,
            self::DELIVERY_CODE__24UURS_20,
            self::DELIVERY_CODE__24UURS_19,
            self::DELIVERY_CODE__24UURS_18,
            self::DELIVERY_CODE__24UURS_17,
            self::DELIVERY_CODE__24UURS_16,
            self::DELIVERY_CODE__24UURS_15,
            self::DELIVERY_CODE__24UURS_14,
            self::DELIVERY_CODE__24UURS_13,
            self::DELIVERY_CODE__24UURS_12,
            self::DELIVERY_CODE__1_2D,
            self::DELIVERY_CODE__2_3D,
            self::DELIVERY_CODE__3_5D,
            self::DELIVERY_CODE__4_8D,
            self::DELIVERY_CODE__1_8D,
            self::DELIVERY_CODE_MIJN_LEVERBELOFTE,
            self::DELIVERY_CODE_VVB,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['delivery_code'] = isset($data['delivery_code']) ? $data['delivery_code'] : null;
        $this->container['pick_up_points'] = isset($data['pick_up_points']) ? $data['pick_up_points'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['method'] === null) {
            $invalidProperties[] = "'method' can't be null";
        }
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeliveryCodeAllowableValues();
        if (!is_null($this->container['delivery_code']) && !in_array($this->container['delivery_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method Specifies whether this shipment has been fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB). Defaults to FBR.
     *
     * @return $this
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
        if (!in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets delivery_code
     *
     * @return string
     */
    public function getDeliveryCode()
    {
        return $this->container['delivery_code'];
    }

    /**
     * Sets delivery_code
     *
     * @param string $delivery_code The delivery promise that applies to this offer. This value will only be used in combination with fulfilmentMethod 'FBR'.
     *
     * @return $this
     */
    public function setDeliveryCode($delivery_code)
    {
        $allowedValues = $this->getDeliveryCodeAllowableValues();
        if (!is_null($delivery_code) && !in_array($delivery_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_code'] = $delivery_code;

        return $this;
    }

    /**
     * Gets pick_up_points
     *
     * @return \Swagger\BolClient\Model\PickUpPoint[]
     */
    public function getPickUpPoints()
    {
        return $this->container['pick_up_points'];
    }

    /**
     * Sets pick_up_points
     *
     * @param \Swagger\BolClient\Model\PickUpPoint[] $pick_up_points Indicates whether this order is shipped to a Pick Up Point.
     *
     * @return $this
     */
    public function setPickUpPoints($pick_up_points)
    {
        $this->container['pick_up_points'] = $pick_up_points;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


